@page
@model StockGame.Pages.Portfolio.TradeModel

@{
  ViewData["Title"] = "Portefeuille";
}

@*/////// TEST ///////*@
<style type="text/css">
  @@keyframes transitionIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .transition {
    animation: transitionIn .4s ease-out;
  }

  @@keyframes transitionY {
    from {
      opacity: 0;
      transform: rotateX(90deg)
    }

    to {
      opacity: 1;
      transform: rotateX(0deg)
    }
  }

  .graph-transition {
    animation: transitionY 1s ease;
  }
</style>
@*//// ^^ TEST ^^ ////*@

<div class="transition mywallet">
  <div class="walletHero">
    <h1><i class="fal fa-wallet" aria-hidden="true"></i> Mon porte-feuille</h1>
    <div class="flex">
      <div class="left">
        <div class="walletInfo">
          <div>
            <h3>@Html.DisplayNameFor(model => model.Portfolio.TotalValue)</h3>
            <div class="value">
              @Html.DisplayFor(model => model.Portfolio.TotalValue)
            </div>
          </div>
          <div>
            <h3>@Html.DisplayNameFor(model => model.Portfolio.Cash)</h3>
            <div class="value">
              @Html.DisplayFor(model => model.Portfolio.Cash)
            </div>
          </div>
        </div>
      </div>
      <div class="right wrapGraph">
        @if (Model.PortfolioTeamHistory.Items.Count > 1)
        {
          <div class="panel-body graph-transition" style="height: 240px">
            <div id="portfolio_chart_div"></div>
          </div>
        }
      </div>
    </div>
  </div>
  <div class="twoCols">
    <div class="left">
      <div class="title">
        <h2><i class="fal fa-chart-pie"></i>Mes actions</h2>
        <a class="btn" data-target="#transaction-modal" data-toggle="modal"><i class="far fa-exchange"></i> Acheter / vendre des actions</a>
      </div>
      <div class="wrapActions">
        @foreach (var item in Model.Portfolio.Items)
        {
          @if (item.Amount <= 0) { continue; }
          <div>
            <div class="logo">
              <img src="@Url.Content(string.Concat(item.Equity.ImgPath.Split('.').FirstOrDefault(), ".png"))" />
            </div>
            <div class="name">
              <b>@Html.DisplayFor(modelItem => item.Equity.Name)</b>
              <div class="qty">
                @Html.DisplayFor(modelItem => item.Amount) actions
              </div>
            </div>
            <div class="totalValue">
              <b></b>
              @if (item.Value > 0f)
              {
                <b>@Html.DisplayFor(modelItem => item.Value)</b>
              }
              <div class="unit">
                @Html.DisplayFor(modelItem => item.Price) / action
              </div>
            </div>
            <div class="variant">
              @if (Model.PriceDifference[@item.EquityId] < 0)
              {
              <strong class="trendDown">
                <i class="far fa-arrow-down"></i>@Model.PriceDifference[@item.EquityId].ToString("0.00") $
              </strong>
              }
              else
              {
                <strong class="trendUp">
                  <i class="far fa-arrow-up"></i>@Model.PriceDifference[@item.EquityId].ToString("0.00") $
                </strong>
              }
            </div>
            <div class="actions">
              <button title="Transiger" onclick="selectElement(@Html.DisplayFor(i => item.Equity.Id))" data-target="#transaction-modal" data-toggle="modal">
                <i class="far fa-exchange"></i>Acheter / vendre
              </button>
              <a asp-page="../Analysis/Details" asp-route-id="@item.EpisodeEquityId">
                <i class="fal fa-passport"></i>Fiche complète
              </a>
            </div>

          </div>
        }
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="transaction-modal" tabindex="-1" role="dialog" style="margin:0 auto">
  <div class="modal-dialog modal-mob">
    <div class="modal-content">
      <form id="form" method="post">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true"><i class="fal fa-times"></i></span>
          </button>
          <h4 class="modal-title"><i class="far fa-exchange"></i>Transaction</h4>
        </div>
        <div class="modal-body">
          <div asp-validation-summary="ModelOnly" class="text-danger"></div>
          <div class="form-group">
            <label asp-for="TransactionEntry.Equity.Name" class="control-label"></label>
            <select id="equity-select" asp-for="TransactionEntry.EquityId" class="form-control" asp-items="ViewBag.EquityId"></select>
          </div>
          <div class="form-group">
            <label asp-for="TransactionEntry.Amount" class="control-label"></label>
            <input asp-for="TransactionEntry.Amount" class="form-control" type="number" min="0" step="10" />
            <span id="validation" asp-validation-for="TransactionEntry.Amount" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="TransactionEntry.Reason" class="control-label"></label>
            <select asp-for="TransactionEntry.TransactionReasonId" class="form-control" asp-items="ViewBag.TransactionReasonId"></select>
          </div>
        </div>
        <div class="modal-actions form-group">
            @*<button asp-for="TransactionEntry.Type" type="submit" onclick="return validate('sell');" class="btn red"><i class="fal fa-inbox-out"></i>Vente</button>*@
            @*<button asp-for="TransactionEntry.Type" type="submit" onclick="return validate('buy');" class="btn"><i class="fas fa-inbox-in"></i>Achat</button>*@
            <input asp-for="TransactionEntry.Type" type="submit" value="Vente" onclick="return validate('sell');" class="btn" style="background-color:red" />
            <input asp-for="TransactionEntry.Type" type="submit" value="Achat" onclick="return validate('buy');" class="btn" style="background-color:green" />
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script>
        $(document).ready(function () {
            getParameter('showModal') == 1 && $('#transaction-modal').modal('show');
            getParameter('equity') && selectElement(getParameter('equity'));
            document.getElementById('validation').innerHTML.length > 0 && $('#transaction-modal').modal('show');
        });

        function getParameter(parameterName) {
            let parameters = new URLSearchParams(window.location.search);
            return parameters.get(parameterName);
        }

        function selectElement(valueToSelect) {
            let element = document.getElementById('equity-select');
            element.value = valueToSelect;
        }

        const tradeableEquities = @Html.Raw(Json.Serialize(Model.TradeableEquities));

        function validate(type) {
            let amount = $('#TransactionEntry_Amount')[0].value;
            if (amount.length == 0) {
                return true;
            }
            let side = type == 'buy' ? 'Acheter' : 'Vendre'
            let index = document.getElementById('equity-select').selectedIndex
            let name = tradeableEquities[index].name;
            let strValue = Number(tradeableEquities[index].price * amount).toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, maximumFractionDigits: 2 });
            return confirm(side + ' ' + amount + ' ' + name + ' pour la somme totale de ' + strValue + "?");
        }

        google.charts.load('current', { packages: ['corechart'] });

        const data = @Html.Raw(Json.Serialize(Model.PortfolioTeamHistory?.Items));

        let portfolioChartData;
        let portfolioChart;
        let portfolioChartOptions;
        let lineColor;

        google.charts.setOnLoadCallback(LoadChartData);

        function getBaseline() {
            let vBaseline;
            for (var v of data) {
                if (vBaseline == null || v.totalValue < vBaseline) {
                    vBaseline = v.totalValue
                }
            }
            return vBaseline/2;
        }

        function LoadChartData() {
            LoadChart(data);
            return false;
        }

        function LoadChart(data) {
            @Model.ActiveGame.InitialCash <= @Model.Portfolio.TotalValue ? lineColor = '#097138' : lineColor = '#a52714';
            portfolioChartData = new google.visualization.DataTable();
            portfolioChart = new google.visualization.LineChart(document.getElementById('portfolio_chart_div'));
            portfolioChartOptions = {
                animation: { startup: true, duration: 250, easing: 'out' },
                chartArea: { width: '85%', height: '60%', bottom: '35%' },
                colors: [lineColor],
                hAxis: { slantedText: true, slantedTextAngle: 15 },
                height: 220,
                //vAxis: { baseline: getBaseline() }
            };

            let portfolioDataArray = [];
            $.each(data, function (i, item) {
                portfolioDataArray.push([item.episodeName, item.totalValue]);
            });

            portfolioChartData.addColumn('string', 'Episode'); // Implicit series 1 data col.
            portfolioChartData.addColumn('number'); // Implicit domain label col.
            portfolioChartData.addRows(portfolioDataArray);

            portfolioChart.draw(portfolioChartData, portfolioChartOptions);

            $("a[href='#graph']").on('shown.bs.tab', function (e) {
                ResizeCharts();
            });

            if (document.addEventListener) {
                window.addEventListener('resize', ResizeCharts);
            }
            else if (document.attachEvent) {
                window.attachEvent('onresize', ResizeCharts);
            }
            else {
                window.resize = ResizeCharts;
            }
            return false;
        }

        function ResizeCharts(data) {
            portfolioChart.draw(portfolioChartData, portfolioChartOptions);
        }

  </script>
}
