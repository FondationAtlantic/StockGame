@page
@model StockGame.Pages.Portfolio.TradeModel

@{
    ViewData["Title"] = "Portefeuille";
}

@*/////// TEST ///////*@
<style type="text/css">
    @@keyframes transitionIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .transition {
        animation: transitionIn .4s ease-out;
    }

    @@keyframes transitionY {
        from {
            opacity: 0;
            transform: rotateX(90deg)
        }
        to {
            opacity: 1;
            transform: rotateX(0deg)
        }
    }
    .graph-transition {
        animation: transitionY 1s ease;
    }

    .posXY {
        margin: 1% 10% 0 2%;
    }

    .modal-mob {
        max-width: calc(100vh - 48%);
        overflow-y: auto;
    }
</style>
@*//// ^^ TEST ^^ ////*@

<div class="transition posXY">

    <div class="title">
        <h2>Portefeuille</h2>
        <a class="btn btn-sm" data-target="#transaction-modal" data-toggle="modal">Achat / Vente</a>
    </div>

    @if (Model.PortfolioTeamHistory.Items.Count > 1)
    {
        <div class="panel-body graph-transition" style="height: 240px">
            <div id="portfolio_chart_div"></div>
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Portfolio.Items[0].Equity.ThumbPath)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Portfolio.Items[0].Equity.Name)
                </th>
                <th class="text-right">
                    @Html.DisplayNameFor(model => model.Portfolio.Items[0].Amount)
                </th>
                <th class="text-right">
                    @Html.DisplayNameFor(model => model.Portfolio.Items[0].Price)
                </th>
                <th class="text-right">
                    @Html.DisplayNameFor(model => model.Portfolio.Items[0].Value)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Portfolio.Items)
            {
                @if (item.Amount <= 0) { continue; }
                <tr>
                    <td>
                        <a href="#" onclick="selectElement(@Html.DisplayFor(i => item.Equity.Id))" data-target="#transaction-modal" data-toggle="modal" style="text-decoration: none; color: black">
                            <img style="height: 2rem" src="@Url.Content(item.Equity.ThumbPath)" />
                        </a>
                    </td>
                    <td>
                        <a href="#" onclick="selectElement(@Html.DisplayFor(i => item.Equity.Id))" data-target="#transaction-modal" data-toggle="modal" style="text-decoration: none; color: black">
                            @Html.DisplayFor(modelItem => item.Equity.Name)
                        </a>
                    </td>
                    <td class="text-right">
                        @if (item.Amount > 0)
                        {@Html.DisplayFor(modelItem => item.Amount);
                    }
                    </td>
                    <td class="text-right">
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td class="text-right">
                        @if (item.Value > 0f)
                        {@Html.DisplayFor(modelItem => item.Value)}
                    </td>
                </tr>
            }
            <tr class="success">
                <td>
                    @Html.DisplayNameFor(model => model.Portfolio.Cash)
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td class="text-right">
                    @Html.DisplayFor(model => model.Portfolio.Cash)
                </td>
            </tr>
            <tr style="border-bottom: 1px solid;border-bottom-color: lightgray;">
                <td>
                    @Html.DisplayNameFor(model => model.Portfolio.TotalValue)
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td class="text-right">
                    @Html.DisplayFor(model => model.Portfolio.TotalValue)
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="modal fade  " id="transaction-modal" tabindex="-1" role="dialog" style="margin:0 auto">
    <div class="modal-dialog modal-mob">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Transaction</h4>
            </div>
            <div class="modal-body">
                <form id="form" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="TransactionEntry.Equity.Name" class="control-label"></label>
                        <select id="equity-select" asp-for="TransactionEntry.EquityId" class="form-control" asp-items="ViewBag.EquityId"></select>
                    </div>
                    <div class="form-group">
                        <label asp-for="TransactionEntry.Amount" class="control-label"></label>
                        <input asp-for="TransactionEntry.Amount" class="form-control" type="number" min="0" step="10" />
                        <span id="validation" asp-validation-for="TransactionEntry.Amount" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="TransactionEntry.Reason" class="control-label"></label>
                        <select asp-for="TransactionEntry.TransactionReasonId" class="form-control" asp-items="ViewBag.TransactionReasonId"></select>
                    </div>
                    <div class="form-group">
                        <input asp-for="TransactionEntry.Type" type="submit" value="Vente" onclick="return validate('sell');" class="btn" style="background-color:red" />
                        <input asp-for="TransactionEntry.Type" type="submit" value="Achat" onclick="return validate('buy');" class="btn" style="background-color:green" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        $(document).ready(function () {
            getParameter('showModal') == 1 && $('#transaction-modal').modal('show');
            getParameter('equity') && selectElement(getParameter('equity'));
            document.getElementById('validation').innerHTML.length > 0 && $('#transaction-modal').modal('show');
        });

        function getParameter(parameterName) {
            let parameters = new URLSearchParams(window.location.search);
            return parameters.get(parameterName);
        }

        function selectElement(valueToSelect) {
            let element = document.getElementById('equity-select');
            element.value = valueToSelect;
        }

        var tradeableEquities = @Html.Raw(Json.Serialize(Model.TradeableEquities));

        function validate(type) {
            var amount = $('#TransactionEntry_Amount')[0].value;
            if (amount.length == 0) {
                return true;
            }
            let side = type == 'buy' ? 'Acheter' : 'Vendre'
            let index = document.getElementById('equity-select').selectedIndex
            let name = tradeableEquities[index].name;
            let strValue = Number(tradeableEquities[index].price * amount).toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, maximumFractionDigits: 2 });
            return confirm(side + ' ' + amount + ' ' + name + ' pour la somme totale de ' + strValue + "?");
        }

        google.charts.load('current', { packages: ['corechart'] });

        var data = @Html.Raw(Json.Serialize(Model.PortfolioTeamHistory?.Items));

        var portfolioChartData;
        var portfolioChart;
        var portfolioChartOptions;
        var lineColor;

        google.charts.setOnLoadCallback(LoadChartData);

        function getBaseline() {
            let vBaseline;
            for (var v of data) {
                if (vBaseline == null || v.totalValue < vBaseline) {
                    vBaseline = v.totalValue
                }
            }
            return vBaseline/2;
        }

        function LoadChartData() {
            LoadChart(data);
            return false;
        }

        function LoadChart(data) {
            @Model.ActiveGame.InitialCash <= @Model.Portfolio.TotalValue ? lineColor = '#097138' : lineColor = '#a52714';
            portfolioChartData = new google.visualization.DataTable();
            portfolioChart = new google.visualization.LineChart(document.getElementById('portfolio_chart_div'));
            portfolioChartOptions = {
                animation: { startup: true, duration: 250, easing: 'out' },
                chartArea: { width: '85%', top: 10, height: '60%' },
                colors: [lineColor],
                hAxis: { slantedText: true, slantedTextAngle: 15 },
                height: 220,
                vAxis: { baseline: getBaseline() }
            };

            var portfolioDataArray = [];
            $.each(data, function (i, item) {
                portfolioDataArray.push([item.episodeName, item.totalValue]);
            });

            portfolioChartData.addColumn('string', 'Episode'); // Implicit series 1 data col.
            portfolioChartData.addColumn('number', 'Valeur'); // Implicit domain label col.
            portfolioChartData.addRows(portfolioDataArray);

            portfolioChart.draw(portfolioChartData, portfolioChartOptions);

            $("a[href='#graph']").on('shown.bs.tab', function (e) {
                ResizeCharts();
            });

            if (document.addEventListener) {
                window.addEventListener('resize', ResizeCharts);
            }
            else if (document.attachEvent) {
                window.attachEvent('onresize', ResizeCharts);
            }
            else {
                window.resize = ResizeCharts;
            }
            return false;
        }

        function ResizeCharts(data) {
            portfolioChart.draw(portfolioChartData, portfolioChartOptions);
        }

    </script>
}
