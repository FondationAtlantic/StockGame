@page
@model StockGame.Pages.Analysis.DetailsModel

@{
    ViewData["Title"] = "Détails";
}

<style type="text/css">
    .second {
        text-align: right;
    }
    .negative {
        color: red;
    }
</style>

<h2>@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Equity.Name)</h2>
<img src="@Url.Content(Model.DetailsItem.EpisodeEquityInfo.Equity.ImgPath)" />

<a id="transaction" class="btn" href="/Portfolio/Trade">Acheter</a>

<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#home">Info</a></li>
    <li><a data-toggle="tab" href="#menu1">Historique</a></li>
    <li><a data-toggle="tab" href="#menu2">Bilan</a></li>
</ul>

<div class="tab-content" width="100%">
    <div id="home" class="tab-pane fade in active">

        <div class="panel panel-default" style="border-top: 0px solid transparent;">
            <div class="panel-body">
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.DetailsItem.EpisodeEquityInfo.Equity.Industry)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Equity.Industry.Name)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.DetailsItem.EpisodeEquityInfo.Price)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Price)
                    </dd>
                </dl>
            </div>
        </div>

        @if (Model.DetailsItem.EpisodeEquityInfo.NewsTitle != null)
        {
            <div class="panel panel-default">
                <div class="panel-heading"><img src="~/images/newspaper_small.png" title="Nouvelles" /> Nouvelles</div>
                <div class="panel-body">
                    <img src="@Url.Content(Model.DetailsItem.EpisodeEquityInfo.NewsImgPath)" style="max-width:100%;" />
                    <br />
                    <h3>@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.NewsTitle)</h3>
                    @Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.NewsDetail)
                </div>
            </div>
        }

        <div class="panel panel-default">
            <div class="panel-heading"><img src="~/images/dividend_small.png" title="Dividende" /> Dividende</div>
            <div class="panel-body">
                <dl class="dl-horizontal">
                    @if (Model.DetailsItem.PrevDividendEpisode != null)
                    {
                        <dt>Précédent</dt>
                        <dd>
                            @Html.DisplayFor(model => model.DetailsItem.PrevDividendEpisode.Dividend) [@Html.DisplayFor(model => model.DetailsItem.PrevDividendEpisode.Episode.Name)]
                        </dd>
                    }
                    @if (!Model.DetailsItem.HasNextKnownDividend)
                    {
                        <dt>Prochain</dt>
                        <dd>Aucun dividende à venir</dd>
                    }
                    else
                    {
                        @if (Model.DetailsItem.EpisodeEquityInfo.Dividend != null)
                        {
                            <dt>Dividende Imminent!</dt>
                            <dd>
                                @Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Dividend) [@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Episode.Name)]
                            </dd>
                        }
                        else if (Model.DetailsItem.NextDividendEpisode != null)
                        {
                            <dt>Prochain</dt>
                            <dd>
                                [@Html.DisplayFor(model => model.DetailsItem.NextDividendEpisode.Episode.Name)]
                            </dd>
                        }
                        @if (Model.DetailsItem.DividendYield != null)
                        {
                            <dt>Rendement Dividende</dt>
                            <dd>
                                @Html.DisplayFor(model => model.DetailsItem.DividendYield)
                            </dd>
                        }
                    }
                </dl>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading"><img src="~/images/results_small.png" title="Résultats Financiers" />Publication du Bénéfice par Action</div>
            <div class="panel-body">
                <dl class="dl-horizontal">
                    @if (Model.DetailsItem.PrevResultsEpisode != null)
                    {
                        <dt>Précédent</dt>
                        <dd>
                            <span class="@(Model.DetailsItem.PrevResultsEpisode.EarningPerShare < 0.0f ? "negative" : "")">@Html.DisplayFor(model => model.DetailsItem.PrevResultsEpisode.EarningPerShare)</span> [@Html.DisplayFor(model => model.DetailsItem.PrevResultsEpisode.Episode.Name)]
                        </dd>

                    }
                    @if (Model.DetailsItem.EpisodeEquityInfo.AnnounceFinancialResults)
                    {
                        <dt>Nouveau Bénéfice!</dt>
                        <dd>
                            <span class="@(Model.DetailsItem.EpisodeEquityInfo.EarningPerShare < 0.0f ? "negative" : "")">@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.EarningPerShare)</span> [@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Episode.Name)]
                        </dd>
                    }
                    @if (Model.DetailsItem.NextResultsEpisode != null)
                    {
                        <dt>Prochain</dt>
                        <dd>
                            [@Html.DisplayFor(model => model.DetailsItem.NextResultsEpisode.Episode.Name)]
                        </dd>
                    }
                </dl>
            </div>
        </div>

    </div>

    <div id="menu1" class="tab-pane fade">
        <br />
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="price_chart_div"></div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="eps_chart_div"></div>
            </div>
        </div>
    </div>
    <div id="menu2" class="tab-pane fade">
        <table class="table">
            <thead>
                <tr>
                    <th text-align="left" style="border-top:none;"><i>@Model.ResultsInfo.PresentationBasis</i></th>
                    <th class="second" style="width:120px; border-top:none;">@Html.DisplayFor(model => model.DetailsItem.EpisodeEquityInfo.Episode.Name)</th>
                </tr>
            </thead>
            <tbody>
                @if(Model.ResultsInfo.Cash.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.Cash)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.Cash)</td>
                </tr>
                }
                @if(Model.ResultsInfo.ShortTermAssets.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.ShortTermAssets)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.ShortTermAssets)</td>
                </tr>
                }
                @if(Model.ResultsInfo.Loans.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.Loans)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.Loans)</td>
                </tr>
                }
                @if(Model.ResultsInfo.OtherAssets.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.OtherAssets)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.OtherAssets)</td>
                </tr>
                }
                <tr style="background-color:lightblue">
                    <th style="padding-left:30px;">@Html.DisplayNameFor(model => model.ResultsInfo.TotalAssets)</th>
                    <td class="second" style="border-top: solid 1px black; border-bottom: solid 2px black;">@Html.DisplayFor(model => model.ResultsInfo.TotalAssets)</td>
                </tr>
                @if(Model.ResultsInfo.ShortTermLiabilities.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.ShortTermLiabilities)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.ShortTermLiabilities)</td>
                </tr>
                }
                @if(Model.ResultsInfo.LongTermDebt.HasValue) {
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.LongTermDebt)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.LongTermDebt)</td>
                </tr>
                }
                <tr style="background-color:lightblue">
                    <th style="padding-left:30px;">@Html.DisplayNameFor(model => model.ResultsInfo.TotalLiabilities)</th>
                    <td class="second" style="border-top: solid 1px black;">@Html.DisplayFor(model => model.ResultsInfo.TotalLiabilities)</td>
                </tr>
                <tr>
                    <td>@Html.DisplayNameFor(model => model.ResultsInfo.TotalEquity)</td>
                    <td class="second">@Html.DisplayFor(model => model.ResultsInfo.TotalEquity)</td>
                </tr>
                <tr style="background-color:lightblue">
                    <th style="padding-left:30px;">@Html.DisplayNameFor(model => model.ResultsInfo.TotalLiabilitiesAndEquity)</th>
                    <td class="second" style="border-top: solid 1px black; border-bottom: solid 2px black;">@Html.DisplayFor(model => model.ResultsInfo.TotalLiabilitiesAndEquity)</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div>
    <a asp-page="./Index">Retour à la liste</a>
</div>


@section Scripts {

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script>
        $('#transaction').on('click', function (e) {
            event.preventDefault();
            window.location.href = event.srcElement.href +
                '?showModal=1' +
                '&equity=' +
                @Model.DetailsItem.EpisodeEquityInfo.Equity.Id;
        });

        google.charts.load('current', { packages: ['corechart'] });

        var data = @Html.Raw(Json.Serialize(Model.PerShareChartItems));

        var priceChartData;
        var priceChart;
        var priceChartOptions;
        var epsChartData;
        var epsChart;
        var epsChartOptions;

        google.charts.setOnLoadCallback(LoadChartData);

        function LoadChartData() {
            LoadChart(data);
            return false;
        }

        function LoadChart(data) {

            priceChartData = new google.visualization.DataTable();
            priceChart = new google.visualization.LineChart(document.getElementById('price_chart_div'));
            priceChartOptions = {
                title: "Prix Historiques",
                chartArea: { width: '50%', top: 55, height: '40%' },
                hAxis: { slantedText: true, slantedTextAngle: 60 },
                vAxis: { title: 'Prix' },
            };

            epsChartData = new google.visualization.DataTable();
            epsChart = new google.visualization.LineChart(document.getElementById('eps_chart_div'));
            epsChartOptions = {
                title: "Bénéfices et Dividendes par Action",
                chartArea: { width: '50%', top: 55, height: '40%' },
                hAxis: { slantedText: true, slantedTextAngle: 60 },
                vAxis: { title: 'Montant', minValue: 0 },
                series: { 1: { pointShape: 'diamond', pointSize: 8, lineWidth: 0 } }
            };

            var priceDataArray = [];
            $.each(data, function (i, item) {
                priceDataArray.push([item.episodeName, item.price]);
            });

            priceChartData.addColumn('string', 'Episode'); // Implicit series 1 data col.
            priceChartData.addColumn('number', 'Prix'); // Implicit domain label col.
            priceChartData.addRows(priceDataArray);

            priceChart.draw(priceChartData, priceChartOptions);

            var epsDataArray = [];
            $.each(data, function (i, item) {
                if (item.earnings != null)
                    epsDataArray.push([item.episodeName, item.earnings, item.dividend, 'div', 'Dividende']);
            });

            epsChartData.addColumn('string', 'Episode'); // Implicit series 1 data col.
            epsChartData.addColumn('number', 'Bénéfices'); // Implicit domain label col.
            epsChartData.addColumn('number', 'Dividende'); // Implicit domain label col.
            epsChartData.addColumn({ type: 'string', role: 'annotation' });
            epsChartData.addColumn({ type: 'string', role: 'annotationText' });
            epsChartData.addRows(epsDataArray);

            epsChart.draw(epsChartData, epsChartOptions);

            $("a[href='#menu1']").on('shown.bs.tab', function (e) {
                ResizeCharts();
            });
                                
            if (document.addEventListener) {
                window.addEventListener('resize', ResizeCharts);
            }
            else if (document.attachEvent) {
                window.attachEvent('onresize', ResizeCharts);
            }
            else {
                window.resize = ResizeCharts;
            }

            return false;
        }

        function ResizeCharts(data) {
            priceChart.draw(priceChartData, priceChartOptions);
            epsChart.draw(epsChartData, epsChartOptions);
        }

    </script>
}

